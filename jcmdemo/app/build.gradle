plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

android {
    // 配置指定版本的签名，上架不同应用商店需要不同证书。
    signingConfigs {
        debug {
            storeFile file('F:\\demo.jks')
            keyAlias 'key0'
            storePassword '123456'
            keyPassword '123456'
        }
        'online-huawei-release' {
            storeFile file('..\\demo.jks')
            storePassword '123456'
            keyAlias 'key0'
            keyPassword '123456'
        }
    }
    compileSdk 33

    defaultConfig {
        applicationId "com.example.jcmdemo"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        manifestPlaceholders = [
                app_name: "示例 1",
        ]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Build > Select Build Variant 切换 后会导致调试时使用该版本。

        // buildConfigField resValue 都需要给出 defaultConfig 默认配置，不然某个版本会因为缺失而编译失败。
        // 字符串需要自行添加双引号。
        // 代码里 BuildConfig.ONLINE_URL
        buildConfigField("String", "ONLINE_URL", "\"www.your.com\"")

        // java 代码 getString(R.string.online_url) 在 context 使用比较方便
        // kotlin compose 使用 stringResource 比较方便
        // 以上2种通过比较绕的方式都能调用。
        resValue("string", "online_url", "www.your.com")

        // 当使用多维度构建时，需要 defaultConfig 给出默认配置，不然 android studio 调试 无法自动选中证书。
        // 使用不同的证书时，如果要装到同一台 安卓设备，必须不同的包名，不然就报“包名相同 签名不同的问题”。（也可以卸载掉一个，这只是个警告，还是可以安装。）
        signingConfig signingConfigs.debug
    }

    // 分发维度，每加一个标签，就多一个维度。
    // 比如又 3个 flavors 是 mode , 4 个 flavors 是 api， 就会有 12 种分发版本
    // Build > Select Build Variant 切换
    // 注：修改配置会有缓存问题（比如：加了维度，然后没有显示出来），清理缓存重启。
    flavorDimensions "mode", "platform"

    productFlavors {
        online {
            dimension "mode"
            manifestPlaceholders = [
                    app_name: "示例 1 线上版",
            ]
            // 字符串需要自行添加双引号。
            // 代码里 BuildConfig.ONLINE_URL
            buildConfigField("String", "ONLINE_URL", "\"www.your-online.com\"")

            // java 代码 getString(R.string.online_url) 在 context 使用比较方便
            // kotlin compose 使用 stringResource 比较方便
            // 以上2种通过比较绕的方式都能调用。
            resValue("string", "online_url", "www.your-online.com")
        }
        offline {
            dimension "mode"
            applicationIdSuffix ".offline"
            manifestPlaceholders = [
                    app_name: "示例 1 离线版",
            ]
        }
        normal {
            dimension "platform"
            manifestPlaceholders = [
                    app_name: "示例 1",
            ]
        }
        xiaomi {
            dimension "platform"
            manifestPlaceholders = [
                    app_name: "示例 1 小米版",
            ]
        }
        huawei {
            dimension "platform"
            manifestPlaceholders = [
                    app_name: "示例 1 华为",
            ]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // 加入多个类型，这个是文件最后的尾缀  ***Dev.apk
        dev {
//            applicationId "com.example.jcmdemo.test"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [
                    app_name: "示例 1 开发版",
            ]
//            resValue("string", "testuser", "测试员")
//            resValue("int", "testid", 1)
        }
        preview {
            applicationIdSuffix ".preview"
            manifestPlaceholders = [
                    app_name: "示例 1 预览版",
            ]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
//        sourceCompatibility JavaVersion.VERSION_11
//        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '1.8'
        //jvmTarget = '11'
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    def nav_version = "2.4.2"
    def camerax_version = "1.1.0"

    implementation("io.coil-kt:coil-compose:2.1.0")

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1"

//    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
//    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'
//    implementation 'tv.danmaku.ijk.media:ijkplayer-x86:0.8.8'
//    implementation 'tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.8'

    implementation 'com.google.android.exoplayer:exoplayer:2.18.1'
    implementation files('libs/extension-ffmpeg-release.aar')

    implementation "androidx.recyclerview:recyclerview:${recycler_view_version}"

    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    // 扩展库
    implementation("com.google.accompanist:accompanist-permissions:$accompanist_version")
    implementation "com.google.accompanist:accompanist-insets:$accompanist_version"
    implementation "com.google.accompanist:accompanist-insets-ui:$accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"

    //implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    implementation "androidx.navigation:navigation-compose:$nav_version"
    implementation 'androidx.core:core-ktx:1.8.0'

    //implementation "androidx.compose.compiler:compiler:$compose_version"
    //implementation "androidx.compose.compiler:compiler:1.2.0"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"

    // x5
    api 'com.tencent.tbs:tbssdk:44226'

    // 截图
    implementation 'com.edmodo:cropper:1.0.1'
    // 截图 4年没人维护了。 和 android.useAndroidX=true 冲突
    // implementation 'com.cesards.android:cropimageview:1.0.2.1'
    // 截图 2
    implementation 'com.isseiaoki:simplecropview:1.1.8'

    // ktor
    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
}