plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.devtools.ksp'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
}

android {
    namespace 'com.example.appshell'
    compileSdk 33

    signingConfigs {
        release {
            storeFile file("../appshell.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
    }

    defaultConfig {
        applicationId "com.example.appshell"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName app_version

        // 不用 x5 内核，使用系统内核也是可以打开网页。系统核心版本随系统，X5内核由腾讯维护，
        // 支持的 JS 系统内核不同客户波动比较大，X5 相对稳定。
        // tbs FAQ：
        // 不给 x86 下载内核，设置以下无效。
        // 内核使用下载，所以必须联网。
//        ndk {
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//        }


        // 腾讯IM
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        // 必须 HTTPS
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            resValue("string", "app_name", "AppShell 正式版")
            resValue("bool", "http_allow", "false")

            buildConfigField("int", "APP_TX_APP_ID", "1400805216")

            signingConfig signingConfigs.release
        }

        // debug 允许 http
        debug {
            applicationIdSuffix ".debug"
            debuggable true

            resValue("string", "app_name", "AppShell 调试版")
            resValue("bool", "http_allow", "true")

            buildConfigField("int", "APP_TX_APP_ID", "1400805216")

            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_11
//        targetCompatibility JavaVersion.VERSION_11
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
//        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "$compose_ui_version"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    // 分发维度，每加一个标签，就多一个维度。
    // 比如又 3个 flavors 是 mode , 4 个 flavors 是 api， 就会有 12 种分发版本
    // Build > Select Build Variant 切换
    // 注：修改配置会有缓存问题（比如：加了维度，然后没有显示出来），清理缓存重启。
    flavorDimensions "mode", "platform"

    productFlavors {
        online {
            dimension "mode"

        }

        offline {
            dimension "mode"
        }

        normal {
            dimension "platform"
        }

        googlePlay {
            dimension "platform"
        }
        xiaomiAppStore {
            dimension "platform"
        }
    }
    sourceSets {
        main {
            assets {
                srcDirs 'src\\main\\assets'
            }
        }
    }

    // 遍历所有构造变量
    applicationVariants.all { variant ->
        // 找到输出相关的变量
        variant.outputs.all { output ->
            // 替换掉输出变量的文件名
            output.outputFileName = "${variant.getFlavorName()}-${variant.buildType.name}-${versionName}-${new Date().format('yyyyMMdd')}-${output.getFilter(com.android.build.OutputFile.ABI)}.apk"
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.0'

    // 时间扩展库，依赖 java 8 新的 LocalDateTime 类，需要 安卓 26（安卓 8.0） 以上版本
    implementation 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.0'

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // live-data
    implementation "androidx.compose.runtime:runtime-livedata:1.4.3"

    // view-model
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1"

    // rx java2
    implementation "androidx.compose.runtime:runtime-rxjava2:1.4.3"

    // rx kotlin 此种为 非 compose ，一般时 kotlin + xml 或 java + xml 使用
    // 不过只是少了一些简易封装，复制点的功能还是要自己封装。
//    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
//    implementation 'io.reactivex.rxjava3:rxkotlin:3.0.1'

    // rx java3 compose 封装，有引入上面的库
    implementation "androidx.compose.runtime:runtime-rxjava3:1.4.3"

    // kotlin 反射
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.21"

    // 扩展库
    api "com.google.accompanist:accompanist-insets:$accompanist_version"
    api "com.google.accompanist:accompanist-insets-ui:$accompanist_version"
    api "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    api "com.google.accompanist:accompanist-pager:$accompanist_version"
    api "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    api "com.google.accompanist:accompanist-swiperefresh:$accompanist_version"

    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.material:material:$compose_ui_version"

    // 路由导航
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    // prefecence android 10 以上使用扩展库提供，旧同名方法被标记为弃用。
    // implementation 'androidx.preference:preference:1.2.0' // JAVA
    implementation 'androidx.preference:preference-ktx:1.2.0' // KT

    // 视频播放
    implementation 'com.google.android.exoplayer:exoplayer:2.18.6'

    // 图片显示
    api "io.coil-kt:coil-compose:2.2.0"

    // BSON
    implementation 'org.mongodb:bson:4.9.0'

    // x5
    api 'com.tencent.tbs:tbssdk:44286'

    // 微信 SDK
    api 'com.tencent.mm.opensdk:wechat-sdk-android:6.8.24'

    // txim
//    api 'com.tencent.imsdk:imsdk:5.1.66' // 基础版，啥都没有，就几个简单接口。。。而且很久没更新。
    api 'com.tencent.imsdk:imsdk-plus:7.1.3933'
//    api 'com.tencent.imsdk:imsdk-plus-pro:版本号'

    // 腾讯 IM 离线推送特定平台包 有给包 lib 类型的包名添加 main 后缀的脏东西。。。
    // 八成是为了自己方便，SDK 就有 main 这样的包后缀，完全没有考虑用户会再封装一个 lib 去用。
    // 只在 app 类型模块引用就没问题。 lib 的不要引入。
    // 这些里面------ start

    // 官方文档漏写了这个。
//    api "com.tencent.tpns:tpns:1.3.3.3-release"
//    // 小米
//    api "com.tencent.tpns:xiaomi:1.3.3.3-release"
//    // 魅族
//    api "com.tencent.tpns:meizu:1.3.3.3-release"
//    // OPPO
//    api "com.tencent.tpns:oppo:1.3.3.3-release"
//    api 'commons-codec:commons-codec:1.15'
//    // vivo
////    implementation "com.tencent.tpns:vivo:1.3.3.3-release"
//    // 华为
//    api 'com.tencent.tpns:huawei:1.3.3.3-release'
//    api 'com.huawei.hms:push:6.7.0.300'
//    // honor
////    implementation 'com.tencent.tpns:honor:1.3.3.3-release'
//    // Google FCM
//    api "com.tencent.tpns:fcm:1.3.3.3-release"
//    // google 云消息传递
//    api ('com.google.firebase:firebase-messaging:19.0.1')
//    // 这些里面------ end

    // room
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // To use Kotlin Symbol Processing (KSP)
    ksp "androidx.room:room-compiler:$room_version"

    // ktor
    api "io.ktor:ktor-client-android:$ktor_version"
    api "io.ktor:ktor-client-cio:$ktor_version"
//    api "io.ktor:ktor-client-serialization:$ktor_version"
    api "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"
    api "io.ktor:ktor-client-content-negotiation:$ktor_version"

    // PDF
//    api 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1' // 没下载源，有人复制了这个版本重新发布。组名变成了 com.github.mhiew
//    api 'com.github.barteksc:android-pdf-viewer:2.8.2' // 没下载源，老版本没库了。
    api 'com.github.mhiew:android-pdf-viewer:3.2.0-beta.3' // 好像还更新了。

    // PDF VIEW 此库比较老，模拟器只提供了 x86 的 so ，x86_64 模拟器 没有 so 不能调试。
    api 'com.joanzapata.pdfview:android-pdfview:1.0.4@aar'

    // 用低版本 API 模拟了 JSR-310 引入的 java.time.* 标准库
    implementation 'com.jakewharton.threetenabp:threetenabp:1.4.6'

    testImplementation 'junit:junit:4.13.2'
    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
}