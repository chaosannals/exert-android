import javax.inject.Inject
import com.google.gson.*
import com.aliyun.oss.*
import com.aliyun.oss.common.auth.*

import java.nio.charset.Charset

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id "com.google.protobuf" version "0.8.17"
}

android {
    namespace 'com.example.hlitdemo'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.hlitdemo"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'

    // jetpack 导航
    api "androidx.navigation:navigation-fragment-ktx:$nav_version"
    api "androidx.navigation:navigation-ui-ktx:$nav_version"
    api "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    api "androidx.navigation:navigation-compose:$nav_version"

    // webkit 扩展库
    implementation "androidx.webkit:webkit:1.6.0"

    // 谷歌扩展库
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.30.1"

    // rx
    implementation "androidx.compose.runtime:runtime-rxjava3:1.4.3"

    // DI
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"
    // DI 和 jetpack 导航库关联库
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
//    implementation("androidx.hilt:hilt-navigation-fragment:1.0.0")

    // Data Store Proto
    // https://developer.android.com/codelabs/android-proto-datastore?hl=zh-cn#6
    // 示例有误，不只依赖 core 库， 所以要引入 preferences
//    implementation  "androidx.datastore:datastore-core:1.0.0"
    implementation 'androidx.datastore:datastore-preferences:1.0.0'
    implementation  "com.google.protobuf:protobuf-javalite:3.18.0"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

kapt {
    correctErrorTypes true
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.14.0"
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}

// 0.配置
// 1.doFirst 倒序
// 2.action 正序
// 3.doLast 正序

abstract class BuildCustomTask extends DefaultTask {
    private String message
    private String jsonPath
    private String proPath
    private final WorkerExecutor workerExecutor
    private final FileSystemOperations fileSystemOperations

    @Inject
    BuildCustomTask(WorkerExecutor workerExecutor, FileSystemOperations fileSystemOperations) {
        this.workerExecutor = workerExecutor
        this.fileSystemOperations = fileSystemOperations
    }

    @Option(option = "message", description = "some message.")
    void setMessage(String message) {
        this.message = message
    }

    @Input
    String getMessage() {
        return message
    }

    @Option(option = "jsonPath", description = "jsonPath.")
    void setJsonPath(String jsonPath) {
        this.jsonPath = jsonPath
    }

    @Input
    String getJsonPath() {
        return jsonPath
    }

    @Option(option = "proPath", description = "properties Path.")
    void setProPath(String proPath) {
        this.proPath = proPath
    }

    @Input
    String getProPath() {
        return proPath
    }

    @TaskAction
    void doAction1() {
        def properties = new Properties()
        def propertiesFile = new File(proPath)
        properties.load(propertiesFile.newDataInputStream())
        def bucket = properties.getProperty("oss.bucket")
        def endPoint = properties.getProperty("oss.endPoint")
        def keyId = properties.getProperty("oss.keyId")
        def keySecret = properties.getProperty("oss.keySecret")

        println("oss: $endPoint bucket: $bucket keyId: $keyId  keySecret: $keySecret")
        def credentialsProvider = CredentialsProviderFactory.newDefaultCredentialProvider(keyId, keySecret)
        def client = (new OSSClientBuilder()).build(endPoint, credentialsProvider)


        def gson = new Gson()
        def content = new String((new File(jsonPath)).readBytes(), Charset.forName("UTF-8"))
        def json = gson.fromJson(content, HashMap.class)

        json.put("aaa", 123)
        json.put("intValue", 456)
        def objectValue = json.get("objectValue")
        objectValue.put("intValue", 9999999)

        def target = new ByteArrayInputStream(gson.toJson(json).bytes)
        client.putObject(bucket, "test/test2.json", target)
    }

    @TaskAction
    void doAction2() {

    }
}

def buildCustom = tasks.register("buildCustom", BuildCustomTask) {
    group = "custom"

    message = "some message"
    jsonPath = rootDir.absolutePath + "/test.json"
    proPath = rootDir.absolutePath + "/local.properties"

    configure {

    }

    doFirst {

    }
}

def buildCustom2 = task("buildCustom2") {
    group = "custom"

    configure {
        dependsOn(
            provider {
                tasks.findAll {
                    it.name == "buildCustom"
                }
            }
        )
    }

    doFirst {

    }



    doLast {

    }
}

def buildCustom3 = task("buildCustom3") {
    group = "custom"
    
    configure {
        mustRunAfter buildCustom // 这个可以在没有依赖下确保执行顺序
    }

    finalizedBy buildCustom2
}

buildCustom3.configure {
    dependsOn buildCustom
}
